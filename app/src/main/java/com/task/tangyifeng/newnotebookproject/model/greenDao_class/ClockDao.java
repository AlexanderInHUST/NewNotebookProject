package com.task.tangyifeng.newnotebookproject.model.greenDao_class;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOCK".
*/
public class ClockDao extends AbstractDao<Clock, Long> {

    public static final String TABLENAME = "CLOCK";

    /**
     * Properties of entity Clock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property NoteId = new Property(2, Long.class, "noteId", false, "NOTE_ID");
        public final static Property IsDel = new Property(3, Boolean.class, "isDel", false, "IS_DEL");
    };


    public ClockDao(DaoConfig config) {
        super(config);
    }
    
    public ClockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"NOTE_ID\" INTEGER," + // 2: noteId
                "\"IS_DEL\" INTEGER);"); // 3: isDel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        Long noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindLong(3, noteId);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(4, isDel ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        Long noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindLong(3, noteId);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(4, isDel ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Clock readEntity(Cursor cursor, int offset) {
        Clock entity = new Clock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // noteId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // isDel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clock entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNoteId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsDel(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clock entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
